Notebook[{
	(* Inherit from Default.nb *)
	Cell[StyleData[StyleDefinitions -> "Default.nb"]],

	Cell[StyleData["Notebook"],
		DockedCells -> {
			Cell[
				BoxData[
					GridBox[{{
						TemplateBox[
							{
								GraphicsBox[{
									InsetBox[
										FormBox["\"TD\"", TraditionalForm],
										{0, 0}
									]
								}, {
									ImageSize -> 15,
									BaselinePosition -> Center
								}],
								"Exclude",
								"Toggle whether the selected cells are marked as Excluded.",
								Function[
									ConnorGray`NotebookWebsiteTools`UI`ToggleExcluded[ButtonNotebook[]]
								],
								"Queued",
								RGBColor[1, 0.85, 0.85], (* $ExcludedColor = LightRed *)
								RGBColor[0.8, 0, 0] (* $ExcludedAccentColor = Darker[Red, 0.2] *)
							},
							"NotebookWebsiteTools:IconAndLabelButtonTemplate"
						]
					}}]
				],
				Background -> GrayLevel[0.9],
				CellFrameMargins -> {{Inherited, Inherited}, {0, 0}}
			]
		}
	],

	(*====================*)
	(* Content Processing *)
	(*====================*)

	Cell[StyleData["Excluded"],
		MenuSortingValue -> 2500,
		Background -> RGBColor[1, 0.85, 0.85], (* $ExcludedColor = LightRed *)
		CellFrame -> {{3, False}, {False, False}},
		CellFrameColor -> RGBColor[0.8, 0, 0] (* Darker[Red, 0.2] *)
	],

	(*===============*)
	(* Special Cells *)
	(*===============*)

	Cell[StyleData["LiteralHTML"],
		MenuSortingValue -> 2500 + 25,
		CellMargins->{{66, 10}, {8, 8}},
		Background -> GrayLevel[0.95],
		CellFrame -> {{3, False}, {False, False}},
		CellFrameColor -> GrayLevel[0.8],
		CellDingbat -> StyleBox["\"</>\"", Bold, GrayLevel[0.6], ShowStringCharacters -> False],
		(* Copied from Default.nb "Program" cells: *)
		StripStyleOnPaste -> True,
		CodeAssistOptions -> {"AutoDetectHyperlinks" -> False},
		Hyphenation -> False,
		AutoQuoteCharacters -> {},
		PasteAutoQuoteCharacters -> {},
		LanguageCategory -> None,
		FontFamily -> Dynamic[
			AbsoluteCurrentValue[
				EvaluationCell[],
				{StyleHints, "CodeFont"}
			]
		]
	],

	(* TODO: Better name for this style. Template, plugin, etc? *)
	Cell[StyleData["ComputedHTML", StyleDefinitions -> StyleData["Input"]],
		MenuSortingValue -> 2500 + 50,
		CellDingbat -> StyleBox["\"</>\"", Bold, GrayLevel[0.6], ShowStringCharacters -> False]
	],

	Cell[StyleData["HighlightSyntax"],
		MenuSortingValue -> 2500 + 75,
		CellMargins->{{66, 10}, {8, 8}},
		(* FIXME: Don't make the display of this cell depend on
			NotebookWebsiteTools having been loaded. *)
		Background :> Dynamic[ConnorGray`NotebookWebsiteTools`UI`HighlightSyntaxCellDefaultBackground[EvaluationCell[]]],
		Background -> RGBColor[1, 1, 0], (* Yellow *)
		CellFrame -> {{3, False}, {False, False}},
		CellFrameColor -> GrayLevel[0.8],
		(* Copied from Default.nb "Program" cells: *)
		StripStyleOnPaste -> True,
		CodeAssistOptions -> {"AutoDetectHyperlinks" -> False},
		Hyphenation -> False,
		AutoQuoteCharacters -> {},
		PasteAutoQuoteCharacters -> {},
		LanguageCategory -> None,
		FontFamily -> Dynamic[
			AbsoluteCurrentValue[
				EvaluationCell[],
				{StyleHints, "CodeFont"}
			]
		],
		(* TODO: Uncomment this PageWidth setting after the bug with its
			interaction with attached cells is fixed. (The Right-aligned
			attached cell is not shown) *)
		(* Don't word wrap content in HighlightSyntax cells, which is
			typically pre-formatted code input. *)
		(* PageWidth -> Infinity, *)
		Initialization :> (
			Needs["ConnorGray`NotebookWebsiteTools`"];
			AttachCell[
				EvaluationCell[],
				Cell[
					BoxData @ ToBoxes @ PaneSelector[
						{
							True -> Row[{
								PopupMenu[
									Dynamic @ CurrentValue[
										ParentCell @ EvaluationCell[],
										{TaggingRules, "HighlightSyntaxOptions", "Syntax"}
									],
									ConnorGray`NotebookWebsiteTools`UI`KnownHighlightChoices[]["Syntaxes"],
									ConnorGray`NotebookWebsiteTools`$DefaultSyntax,
									Framed[
										Style[
											Row[{
												Dynamic @ Replace[
													CurrentValue[
														ParentCell @ EvaluationCell[],
														{TaggingRules, "HighlightSyntaxOptions", "Syntax"}
													],
													Inherited -> ConnorGray`NotebookWebsiteTools`$DefaultSyntax
												],
												"\[VeryThinSpace]\[RightAngleBracket]"
											}],
											FontSize -> 11,
											FontWeight -> "Bold",
											FontColor -> GrayLevel[0.5]
										],
										FrameMargins -> 4,
										FrameStyle -> Directive[
											RGBColor[0.8549, 0.83137, 0.72549],
											AbsoluteThickness[1]
										],
										ImageMargins -> {{0, 3}, {0, 0}},
										RoundingRadius -> 3,
										Background -> LightYellow
									]
								],
								PopupMenu[
									Dynamic @ CurrentValue[
										ParentCell @ EvaluationCell[],
										{TaggingRules, "HighlightSyntaxOptions", "Theme"}
									],
									ConnorGray`NotebookWebsiteTools`UI`KnownHighlightChoices[]["Themes"],
									ConnorGray`NotebookWebsiteTools`$DefaultTheme,
									Framed[
										Style[
											Row[{
												Dynamic @ Replace[
													CurrentValue[
														ParentCell @ EvaluationCell[],
														{TaggingRules, "HighlightSyntaxOptions", "Theme"}
													],
													Inherited -> ConnorGray`NotebookWebsiteTools`$DefaultTheme
												],
												"\[VeryThinSpace]\[RightAngleBracket]"
											}],
											FontSize -> 11,
											FontWeight -> "Bold",
											FontColor -> GrayLevel[0.5]
										],
										FrameMargins -> 4,
										FrameStyle -> Directive[
											RGBColor[0.8549, 0.83137, 0.72549],
											AbsoluteThickness[1]
										],
										ImageMargins -> {{0, 3}, {0, 0}},
										RoundingRadius -> 3,
										Background -> LightYellow
									]
								]
							}],
							False -> ""
						},
						(* Display the Syntax picker popup if the mouse is
							over the parent HighlightSynax cell or this
							attached cell. *)
						Dynamic[
							CurrentValue[
								ParentCell @ EvaluationCell[],
								{TaggingRules, "parent_cell_is_hovered"}
							] || CurrentValue["MouseOver"]
						]
					],
					CellEventActions -> None,
					Background -> Transparent
				],
				{Right, Top},
				-2,
				{Right, Top}
			]
		),
		CellDynamicExpression -> Dynamic[
			(* If this HighlightSyntax cell is hovered, set this tagging rule
				so that the attached settings cell knows to display itself.
				Use `Inherited` in the False case so that this tagging rule
				is removed when hovering ends. *)
			CurrentValue[EvaluationCell[], {TaggingRules, "parent_cell_is_hovered"}] =
				If[TrueQ[CurrentValue["MouseOver"]], True, Inherited];
		],
		CellEventActions -> {
			PassEventsDown -> True,
			(* Note: This undocumented option causes the cell event handler
				actions to be run AFTER the default FE behavior for the
				event runs (the default is that user-specified event handlers
				are run before the default FE ones).

				We want this because we need the character the user typed to
				be added to the content of the cell before we read the
				contents of the cell in our "KeyDown" event hander. *)
			EvaluationOrder -> After,
			"KeyDown" :> (
				HandleHighlightSyntaxCellEvent[EvaluationCell[], "KeyDown"]
			)
		}
	],

	(*====================================*)
	(* Toolbar button TemplateBox styles  *)
	(*====================================*)

	Cell[
		StyleData["NotebookWebsiteTools:IconAndLabelButtonTemplate"],
		TemplateBoxOptions -> {
			(*
				Parameters: {icon, label, tooltip, action, buttonMethod, buttonDefaultBackground, buttonAccentColor}

				(TemplateBox DisplayFunction's are 'evaluated' by the FrontEnd, whose
				very basic evaluator doesn't not support named Function parameters.)
			*)
			DisplayFunction -> Function[
				DynamicModuleBox[{state = "default"},
					TagBox[
						ButtonBox[
							FrameBox[
								GridBox[
									{{
										StyleBox[
											#1,
											GraphicsBoxOptions -> {
												BaseStyle -> Dynamic[
													Switch[state,
														"hovered", White,
														_, #7
													]
												]
											}
										],
										PaneBox[#2]
									}},
									GridBoxAlignment -> {
										"Columns" -> {{Left}},
										"Rows" -> {{Center}}
									}
								],
								BaseStyle -> {
									FontSize -> 10,
									FontWeight -> Automatic,
									FontColor -> Dynamic[Switch[state,
										"hovered", White,
										_, #7
									]]
								},
								FrameMargins -> {{2, 2}, {2, 1}},
								FrameStyle -> Directive[Thickness[1], #7],
								Background -> Dynamic[Switch[state,
									"default",
										#6,
									"hovered",
										RGBColor[1, 0.5, 0],
									"pressed",
										Gray
								]],
								RoundingRadius -> 3
							],
							Appearance -> None,
							ButtonFunction :> #4,
							Method -> #5,
							Evaluator -> Automatic
						],
						EventHandlerTag[{
							"MouseEntered" :> (state = "hovered"),
							"MouseExited" :> (state = "default"),
							{"MouseDown", 1} :> (state = "pressed"),
							{"MouseUp", 1} :> (state = "hovered"),
							PassEventsDown -> True,
							PassEventsUp -> True,
							Method -> "Preemptive"
						}]
					],
					DynamicModuleValues :> {}
				]
			]
		}
	]
}]